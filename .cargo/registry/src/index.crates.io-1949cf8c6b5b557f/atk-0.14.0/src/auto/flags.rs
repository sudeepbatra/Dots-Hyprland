// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use bitflags::bitflags;
use glib::translate::*;
use glib::value::FromValue;
use glib::value::ToValue;
use glib::StaticType;
use glib::Type;
use std::fmt;

bitflags! {
    #[doc(alias = "AtkHyperlinkStateFlags")]
    pub struct HyperlinkStateFlags: u32 {
        #[doc(alias = "ATK_HYPERLINK_IS_INLINE")]
        const INLINE = ffi::ATK_HYPERLINK_IS_INLINE as u32;
    }
}

impl fmt::Display for HyperlinkStateFlags {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        <Self as fmt::Debug>::fmt(self, f)
    }
}

#[doc(hidden)]
impl IntoGlib for HyperlinkStateFlags {
    type GlibType = ffi::AtkHyperlinkStateFlags;

    fn into_glib(self) -> ffi::AtkHyperlinkStateFlags {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::AtkHyperlinkStateFlags> for HyperlinkStateFlags {
    unsafe fn from_glib(value: ffi::AtkHyperlinkStateFlags) -> Self {
        skip_assert_initialized!();
        Self::from_bits_truncate(value)
    }
}

impl StaticType for HyperlinkStateFlags {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::atk_hyperlink_state_flags_get_type()) }
    }
}

impl glib::value::ValueType for HyperlinkStateFlags {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for HyperlinkStateFlags {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        skip_assert_initialized!();
        from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }
}

impl ToValue for HyperlinkStateFlags {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}
